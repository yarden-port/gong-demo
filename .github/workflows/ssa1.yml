name: Demo 1 - Regular SSA Pipeline

on:
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: "Port's payload with context and details about the run."
        type: string

jobs:
  pipeline-progress:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Access Token
        id: generate-token
        run: |
          access_token=$(curl --location --request POST 'https://api.getport.io/v1/auth/access_token' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "clientId": "'${{ secrets.PORT_CLIENT_ID }}'",
              "clientSecret": "'${{ secrets.PORT_CLIENT_SECRET }}'"
          }' | jq '.accessToken' | sed 's/"//g')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Log Step 1 Progress
        run: |
          # Update statusLabel and summary
          curl -L -X PATCH "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 1 Completed",
            "summary": "Step 1 completed successfully."
          }'
          # Add log entry
          curl -L "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}/logs" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 1 Completed",
            "message": "Step 1 completed successfully."
          }'

      - name: Wait 5 Seconds
        run: sleep 5

      - name: Log Step 2 Progress
        run: |
          # Update statusLabel and summary
          curl -L -X PATCH "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 2 Completed",
            "summary": "Step 2 completed successfully."
          }'
          # Add log entry
          curl -L "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}/logs" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 2 Completed",
            "message": "Step 2 completed successfully."
          }'

      - name: Wait 5 Seconds
        run: sleep 5

      - name: Log Step 3 Progress
        run: |
          # Update statusLabel and summary
          curl -L -X PATCH "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 3 Completed",
            "summary": "Step 3 completed successfully."
          }'
          # Add log entry
          curl -L "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}/logs" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 3 Completed",
            "message": "Step 3 completed successfully."
          }'

      - name: Wait 5 Seconds
        run: sleep 5

      - name: Log Step 4 Error
        run: |
          # Update statusLabel and summary
          curl -L -X PATCH "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Error in Step 4",
            "summary": "Error in Step 4: Pipeline halted due to an issue."
          }'
            # Add log entry
          curl -L "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}/logs" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "statusLabel": "Step 4 Failed",
            "message": "Step 4 Filed with error code 666"
          }'
          

      - name: Wait 5 Seconds
        run: sleep 5

      - name: Set Final Status as Failure
        run: |
          # Finalize run status
          curl -L -X PATCH "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "status": "FAILURE",
            "statusLabel": "Pipeline Failed",
            "summary": "Pipeline completed with errors."
          }'
          # Add final log entry
          curl -L "https://api.getport.io/v1/actions/runs/${{ fromJson(inputs.port_payload).runId }}/logs" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "terminationStatus": "FAILURE",
            "statusLabel": "Pipeline Failed",
            "message": "Pipeline completed with errors."
          }'
