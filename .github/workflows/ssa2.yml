name: SSA 2 - Workflow with Multiple Deployments, Steps, and Logs

on:
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: "Port's payload with details about the workflow entity."
        type: string

jobs:
  create-deployments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Access Token
        id: generate-token
        run: |
          access_token=$(curl --location --request POST 'https://api.getport.io/v1/auth/access_token' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "clientId": "'${{ secrets.PORT_CLIENT_ID }}'",
              "clientSecret": "'${{ secrets.PORT_CLIENT_SECRET }}'"
          }' | jq '.accessToken' | sed 's/"//g')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Trigger First Deployment
        id: deploy-1
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/deployment/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "deployment-1-${{ github.run_id }}",
            "title": "First Deployment for Workflow - ${{ fromJson(inputs.port_payload).workflow_id }}",
            "blueprint": "deployment",
            "properties": {
              "status": "IN_PROGRESS",
              "status_message": "First deployment is in progress."
            },
            "relations": {
              "workflow": "${{ fromJson(inputs.port_payload).workflow_id }}"
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Trigger Second Deployment
        id: deploy-2
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/deployment/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "deployment-2-${{ github.run_id }}",
            "title": "Second Deployment for Workflow - ${{ fromJson(inputs.port_payload).workflow_id }}",
            "blueprint": "deployment",
            "properties": {
              "status": "IN_PROGRESS",
              "status_message": "Second deployment is in progress."
            },
            "relations": {
              "workflow": "${{ fromJson(inputs.port_payload).workflow_id }}"
            }
          }'

  process-steps:
    needs: create-deployments
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Access Token
        id: generate-token
        run: |
          access_token=$(curl --location --request POST 'https://api.getport.io/v1/auth/access_token' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "clientId": "'${{ secrets.PORT_CLIENT_ID }}'",
              "clientSecret": "'${{ secrets.PORT_CLIENT_SECRET }}'"
          }' | jq '.accessToken' | sed 's/"//g')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: First Deployment - Step 1 with Logs (Success)
        id: step-1-deploy-1
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/step/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "step-1-deployment-1-${{ github.run_id }}",
            "title": "Step 1 for First Deployment",
            "blueprint": "step",
            "properties": {
              "status": "COMPLETED",
              "status_message": "Step 1 completed successfully.",
              "log_stream": "### Log Stream for Step 1\n**Deployment:** deployment-1-${{ github.run_id }}\n**Status:** **COMPLETED**\n**Logs:**\n- Starting deployment for `user-service`.\n- Pulled container image `user-service:v1.2.3`.\n- Successfully applied Kubernetes manifest.\n- Deployment finished successfully at 2024-11-27T12:00:00Z.\n"
            },
            "relations": {
              "deployment": "deployment-1-${{ github.run_id }}"
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: First Deployment - Step 2 with Logs (Success)
        id: step-2-deploy-1
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/step/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "step-2-deployment-1-${{ github.run_id }}",
            "title": "Step 2 for First Deployment",
            "blueprint": "step",
            "properties": {
              "status": "COMPLETED",
              "status_message": "Step 2 completed successfully.",
              "log_stream": "### Log Stream for Step 2\n**Deployment:** deployment-1-${{ github.run_id }}\n**Status:** **COMPLETED**\n**Logs:**\n- Running service validation for `user-service`.\n- Service passed all health checks.\n- Deployment validated at 2024-11-27T12:05:00Z.\n"
            },
            "relations": {
              "deployment": "deployment-1-${{ github.run_id }}"
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Update First Deployment as Completed
        id: update-deployment-1
        run: |
          curl -L -X PATCH "https://api.getport.io/v1/blueprints/deployment/entities/deployment-1-${{ github.run_id }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "properties": {
              "status": "COMPLETED",
              "status_message": "Deployment completed successfully after all steps."
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Second Deployment - Step 3 with Logs (Failure)
        id: step-3-deploy-2
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/step/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "step-3-deployment-2-${{ github.run_id }}",
            "title": "Step 3 for Second Deployment",
            "blueprint": "step",
            "properties": {
              "status": "FAILED",
              "status_message": "Step 3 encountered an unexpected error.",
              "log_stream": "### Log Stream for Step 3\n**Deployment:** deployment-2-${{ github.run_id }}\n**Status:** **FAILED**\n**Logs:**\n- Pulling container image `order-service:v2.5.1`.\n- Error: Network timeout while pulling image.\n- Retry attempts failed. Step terminated at 2024-11-27T12:10:00Z.\n"
            },
            "relations": {
              "deployment": "deployment-2-${{ github.run_id }}"
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Update Second Deployment as Failed
        id: update-deployment-2
        run: |
          curl -L -X PATCH "https://api.getport.io/v1/blueprints/deployment/entities/deployment-2-${{ github.run_id }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "properties": {
              "status": "FAILED",
              "status_message": "Deployment failed at Step 3 with error: Network timeout while pulling image."
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Update Workflow as Failed
        id: update-workflow
        run: |
          curl -L -X PATCH "https://api.getport.io/v1/blueprints/workflow/entities/${{ fromJson(inputs.port_payload).workflow_id }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "properties": {
              "status": "FAILED",
              "status_message": "Workflow failed at deployment-2, step-3 with error: Network timeout while pulling image."
            }
          }'
