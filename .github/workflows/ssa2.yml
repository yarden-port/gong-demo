name: SSA 2 - Workflow with Enhanced Steps and Real-Life Logs

on:
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: "Port's payload with details about the workflow entity."
        type: string

jobs:
  process-steps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Generate Access Token
        id: generate-token
        run: |
          access_token=$(curl --location --request POST 'https://api.getport.io/v1/auth/access_token' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "clientId": "'${{ secrets.PORT_CLIENT_ID }}'",
              "clientSecret": "'${{ secrets.PORT_CLIENT_SECRET }}'"
          }' | jq '.accessToken' | sed 's/"//g')
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Create Step 1 with Logs (Success)
        id: step-1-deploy-1
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/step/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "step-1-deployment-1-${{ github.run_id }}",
            "title": "Step 1 for First Deployment",
            "blueprint": "step",
            "properties": {
              "status": "COMPLETED",
              "status_message": "Step 1 completed successfully.",
              "log_stream": "### Log Stream for Step 1\n**Deployment:** deployment-1-${{ github.run_id }}\n**Status:** **COMPLETED**\n**Message:** Starting deployment for service `user-service`.\n\n#### Logs:\n- Initializing deployment process for `user-service`.\n- Fetching container image `user-service:v1.2.3`.\n- Connecting to cluster `prod-cluster-01`.\n- Deployment status: Pending.\n- Deployment completed successfully.\n- Verified successful health checks.\n\n**Timestamp:** $(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
            },
            "relations": {
              "deployment": "deployment-1-${{ github.run_id }}"
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Create Step 2 with Logs (Failure)
        id: step-2-deploy-1
        run: |
          curl -L -X POST "https://api.getport.io/v1/blueprints/step/entities" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "identifier": "step-2-deployment-1-${{ github.run_id }}",
            "title": "Step 2 for First Deployment",
            "blueprint": "step",
            "properties": {
              "status": "FAILED",
              "status_message": "Step 2 encountered an unexpected error.",
              "log_stream": "### Log Stream for Step 2\n**Deployment:** deployment-1-${{ github.run_id }}\n**Status:** **FAILED**\n**Error:** Image pull failed due to network timeout.\n\n#### Logs:\n- Fetching container image `user-service:v1.2.3`.\n- Retrying pull operation (attempt 1 of 3)...\n- Retrying pull operation (attempt 2 of 3)...\n- Retrying pull operation (attempt 3 of 3)...\n- Final error: Image pull failed. Deployment aborted.\n\n**Timestamp:** $(date -u +\"%Y-%m-%dT%H:%M:%SZ\")"
            },
            "relations": {
              "deployment": "deployment-1-${{ github.run_id }}"
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Update Deployment as Failed
        if: always()
        id: fail-deployment-1
        run: |
          curl -L -X PATCH "https://api.getport.io/v1/blueprints/deployment/entities/deployment-1-${{ github.run_id }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "properties": {
              "status": "FAILED",
              "status_message": "Step 2 has failed with error: Step 2 encountered an unexpected error."
            }
          }'

      - name: Sleep for 5 Seconds
        run: sleep 5

      - name: Update Workflow as Failed
        if: always()
        id: fail-workflow
        run: |
          curl -L -X PATCH "https://api.getport.io/v1/blueprints/workflow/entities/${{ fromJson(inputs.port_payload).workflow_id }}" \
          -H "Authorization: Bearer ${{ env.ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "properties": {
              "status": "FAILED",
              "status_message": "Deployment deployment-1, step 2 has failed with error: Step 2 encountered an unexpected error."
            }
          }'
